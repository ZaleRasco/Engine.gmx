<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_launch</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>obj_parentWall</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize
grav = 1.2
startDeath=false
horFriction=0.99
verFriction=0.99
verTerminal=32

useFrictionx = 1
useFrictiony = 1
time = 0

horSpeed = 0
verSpeed = 0
horFrac = 0
verFrac = 0
horSpeedStore = 0
verSpeedStore = 0

hAccel = 4
maxSpeed = 15
jumpSpeed = 25

inDeath = false

aboveFree = false
belowFree = false
leftFree = false
rightFree = false
launchDone = true
aboveJump = false
belowJump = false
leftJump = false
rightJump = false

startX = x
startY = y

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Keys

left = false
right = false
up = false
down = false
leftPress = false
rightPress = false
upPress = false
downPress = false

aKey = false
dKey = false
sKey = false
wKey = false
zKey = false
aKeyPress = false
dKeyPress = false
sKeyPress = false
wKeyPress = false
zKeyPress = false

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Info

//Place Free
if (place_meeting(x, y + 1, obj_parentWall)) {
    belowFree = false
}
else {
    belowFree = true
}
if (place_meeting(x, y - 1, obj_parentWall)) {
    aboveFree = false
}
else {
    aboveFree = true
}
if (place_meeting(x + 1, y, obj_parentWall)) {
    rightFree = false
}
else {
    rightFree = true
}
if (place_meeting(x - 1, y, obj_parentWall)) {
    leftFree = false
}
else {
    leftFree = true
}

//Can Jump
if (place_meeting(x, y + 1, obj_parentJump)) {
    belowJump = true
}
else {
    belowJump = false
}
if (place_meeting(x, y - 1, obj_parentJump)) {
    aboveJump = true
}
else {
    aboveJump = false
}
if (place_meeting(x + 1, y, obj_parentJump)) {
    rightJump = true
}
else {
    rightJump = false
}
if (place_meeting(x - 1, y, obj_parentJump)) {
    leftJump = true
}
else {
    leftJump = false
}

//Keys pressed
if (keyboard_check_pressed(vk_left)) {
leftPress = true
}
if (keyboard_check_pressed(vk_right)) {
rightPress = true
}
if (keyboard_check_pressed(vk_down)) {
downPress = true
}
if (keyboard_check_pressed(vk_up)) {
upPress = true
}
if (keyboard_check_pressed(ord('A'))) {
aKeyPress = true
}
if (keyboard_check_pressed(ord('D'))) {
dKeyPress = true
}
if (keyboard_check_pressed(ord('S'))) {
sKeyPress = true
}
if (keyboard_check_pressed(ord('W'))) {
wKeyPress = true
}

if(keyboard_check_pressed(ord('Z'))) {
zKeyPress = true
}

//Keys held
if (keyboard_check(vk_left)) {
left = true
}
if (keyboard_check(vk_right)) {
right = true
}
if (keyboard_check(vk_down)) {
down = true
}
if (keyboard_check(vk_up)) {
up = true
}
if (keyboard_check(ord('A'))) {
aKey = true
}
if (keyboard_check(ord('D'))) {
dKey = true
}
if (keyboard_check(ord('S'))) {
sKey = true
}
if (keyboard_check(ord('W'))) {
wKey = true
}

if(keyboard_check(ord('Z'))) {
zKey = true
}

//Falsities
if (!keyboard_check_pressed(vk_left)) {
leftPress = false
}
if (!keyboard_check_pressed(vk_right)) {
rightPress = false
}
if (!keyboard_check_pressed(vk_down)) {
downPress = false
}
if (!keyboard_check_pressed(vk_up)) {
upPress = false
}
if (!keyboard_check_pressed(ord('A'))) {
aKeyPress = false
}
if (!keyboard_check_pressed(ord('D'))) {
dKeyPress = false
}
if (!keyboard_check_pressed(ord('S'))) {
sKeyPress = false
}
if (!keyboard_check_pressed(ord('W'))) {
wKeyPress = false
}
if(!keyboard_check_pressed(ord('Z'))) {
zKeyPress = false
}
if (!keyboard_check(vk_left)) {
left = false
}
if (!keyboard_check(vk_right)) {
right = false
}
if (!keyboard_check(vk_down)) {
down = false
}
if (!keyboard_check(vk_up)) {
up = false
}
if (!keyboard_check(ord('A'))) {
aKey = false
}
if (!keyboard_check(ord('D'))) {
dKey = false
}
if (!keyboard_check(ord('S'))) {
sKey = false
}
if (!keyboard_check(ord('W'))) {
wKey = false
}
if(!keyboard_check(ord('Z'))) {
zKey = true
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement

if((left||aKey)&amp;&amp;(horSpeed &gt; -20)) {
    if(horSpeed - 5 &lt;-20) {
        horSpeed = -maxSpeed
    }
    horSpeed -= hAccel
}

if((right||dKey)&amp;&amp;(horSpeed &lt; 20)) {
    if(horSpeed + 5 &gt; 20) {
        horSpeed = maxSpeed
    }
    horSpeed += hAccel
}

if((up||wKey)&amp;&amp;belowJump) {
    verSpeed = -jumpSpeed
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collisions
verFrac += frac(verSpeed)
verDistance = verSpeed
if abs(verFrac) &gt;= 1 {
    verDistance += sign(verFrac)
    verFrac -= sign(verFrac)
}
for (v = 1; v &lt;= floor(abs(verDistance)); v++) {
    if (!place_meeting(x, y + sign(verSpeed), obj_parentWall)) {
        y += sign(verSpeed)
        v++
        if (place_meeting(x, y, obj_parentDeath)) {
            startDeath = true
        }
    }
    else {
        verSpeed = 0
    }
}
horFrac += frac(horSpeed)
horDistance = horSpeed
if abs(horFrac) &gt;= 1 {
    horDistance += sign(horFrac)
    horFrac -= sign(horFrac)
}
for (h = 1; h &lt;= floor(abs(horDistance)); h++) {
    if (!place_meeting(x + sign(horSpeed), y, obj_parentWall)) {
        x += sign(horSpeed)
        h++
    }
    else if (place_meeting(x + sign(horSpeed), y, obj_parentDeath)) {
        startDeath = true
    }
    else {
        horSpeed = 0
    }
}
if (place_free(x, y + 1) &amp;&amp; verSpeed &lt;= verTerminal) {
    verSpeed += grav
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Friction

useFrictiony=1
useFrictionx=1
if(!place_free(x,y+1))
{
    useFrictionx=useFrictionx*instance_place(x,y+1,obj_parentWall).horFriction
}
else
{
    useFrictionx=useFrictionx*0.85
}
if(!place_free(x,y-1))
{
    useFrictionx=useFrictionx*instance_place(x,y-1,obj_parentWall).horFriction
}
if(!place_free(x+1,y))
{
    useFrictiony=useFrictiony*instance_place(x+1,y,obj_parentWall).verFriction
}
if(!place_free(x-1,y))
{
    useFrictiony=useFrictiony*instance_place(x-1,y,obj_parentWall).verFriction
}

if(!left &amp;&amp; !right)
{
    horSpeed=horSpeed*useFrictionx
    verSpeed=verSpeed*useFrictiony
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Death and room switching
if (place_meeting(x, y, obj_exit)) {
room_goto_next()
}

if (startDeath = true &amp;&amp; inDeath = false) {
    inDeath = true
    startDeath=false
    timeline_index = tme_death
    timeline_position = 0
    timeline_running = true
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Die

startDeath=true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug

draw_text(10,25,"FrictionX: " + string(useFrictionx))
draw_text(10,50,"FrictionY: " + string(useFrictiony))
draw_text(10,75,"horSpeed: " + string(horSpeed))
draw_text(10,100,"verSpeed: " + string(verSpeed))
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
